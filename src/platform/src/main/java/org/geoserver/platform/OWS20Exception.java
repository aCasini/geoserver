/* Copyright (c) 2001 - 2012 TOPP - www.openplans.org. All rights reserved.
 * This code is licensed under the GPL 2.0 license, availible at the root
 * application directory.
 */
package org.geoserver.platform;

/**
 * Class for exceptions generated by an OWS2.0 service.
 * <p>
 * It adds support to HTTP return codes.
 * </p>
 *
 * @author Emanuele Tajariol - GeoSolutions
 */
public class OWS20Exception extends ServiceException {

    /**
     * Serial UID
     */
    private static final long serialVersionUID = 7254349181794561724L;

    public enum OWSExceptionCode {

        OperationNotSupported(501, "Not Implemented"),
        MissingParameterValue(400, "Bad request"),
        InvalidParameterValue(400, "Bad request"),
        VersionNegotiationFailed(400, "Bad request"),
        InvalidUpdateSequence(400, "Bad request"),
        OptionNotSupported(501, "Not Implemented"),
        NoApplicableCode(500, "Not Implemented"); // code may be overwritten
        
        private final Integer httpCode;
        private final String httpMessage;

        private OWSExceptionCode() {
            this(null, null);
        }

        private OWSExceptionCode(Integer httpCode) {
            this(httpCode, null);
        }

        private OWSExceptionCode(Integer httpCode, String message) {
            this.httpCode = httpCode;
            this.httpMessage = message;
        }

        public Integer getHttpCode() {
            return httpCode;
        }

        public String getHttpMessage() {
            return httpMessage;
        }
    }
    /**
     * HTTP response code. May be null when not specified.
     */
    protected Integer httpCode;

    /**
     * Constructs the exception from a message.
     *
     * @param message The message describing the exception.
     */
    public OWS20Exception(String message) {
        super(message);
    }

    /**
     * Constructs the exception from a message and causing exception.
     *
     * @param message The message describing the exception.
     * @param cause The case of the exception.
     */
    public OWS20Exception(String message, Throwable cause) {
        super(message, cause);
    }

    /**
     * Constructs the exception from a message, causing exception, and code.
     *
     * @param message The message describing the exception.
     * @param cause The case of the exception.
     * @param code The application specific exception code for the exception.
     */
    public OWS20Exception(String message, Throwable cause, String code) {
        this(message, cause);
    }

    /**
     * Constructs the exception from a message, causing exception, code, and locator.
     *
     * @param message The message describing the exception.
     * @param cause The case of the exception.
     * @param code The application specific exception code for the exception.
     * @param locator The application specific locator for the exception.
     */
    protected OWS20Exception(String message, Throwable cause, String code, String locator) {
        super(message, cause, code);
    }

    public OWS20Exception(String message, Throwable cause, OWSExceptionCode code, String locator) {
        super(message, cause, code.name());
        setHttpCode(code.getHttpCode());
    }

    /**
     * Constructs the exception from a message, and code.
     *
     * @param message The message describing the exception.
     * @param code The application specific exception code for the exception.
     */
    protected OWS20Exception(String message, String code) {
        super(message);
    }

    public OWS20Exception(String message, OWSExceptionCode code) {
        super(message, code.name());
        setHttpCode(code.getHttpCode());
    }

    /**
     * Constructs the exception from a message,code, and locator.
     *
     * @param message The message describing the exception.
     * @param code The application specific exception code for the exception.
     * @param locator The application specific locator for the exception.
     */
    protected OWS20Exception(String message, String code, String locator) {
        super(message, code);
    }

    public OWS20Exception(String message, OWSExceptionCode code, String locator) {
        super(message, code.name(), locator);
        setHttpCode(code.getHttpCode());
    }

    /**
     * Constructs the exception from a causing exception.
     *
     * @param cause The case of the exception.
     */
    public OWS20Exception(Throwable cause) {
        super(cause);
    }

    /**
     * Constructs the exception from causing exception, and code.
     *
     * @param cause The case of the exception.
     * @param code The application specific exception code for the exception.
     */
    protected OWS20Exception(Throwable cause, String code) {
        super(cause);
    }

    /**
     * Constructs the exception from a causing exception, code, and locator.
     *
     * @param cause The case of the exception.
     * @param code The application specific exception code for the exception.
     * @param locator The application specific locator for the exception.
     */
    protected OWS20Exception(Throwable cause, String code, String locator) {
        super(cause, code);
    }

    public OWS20Exception(Throwable cause, OWSExceptionCode code, String locator) {
        super(cause, code.name());
        setHttpCode(code.getHttpCode());
    }

    public Integer getHttpCode() {
        return httpCode;
    }

    public void setHttpCode(Integer httpCode) {
        this.httpCode = httpCode;
    }

    @Override
    public String toString() {
        String msg = super.toString();

        if (httpCode == null) {
            return msg;
        } else {
            return msg + NEW_LINE + "HTTPcode:" + httpCode;
        }
    }
}
